class AudioPopup{constructor(){this.audioPopup=null,this.buttonsContainer=null,this.audioList=null,this.emptyListHeader=null,this.dragPopupBtn=null,this.renderedLinks={},this.handleDocumentMousemove=this.handleDocumentMousemove.bind(this),this.initMessageListeners()}initMessageListeners(){chrome.runtime.onMessage.addListener(((e,t,s)=>("createAudioPopup"===e.type?this.handleCreateAudioPopup(e.data):"insertTrack"===e.type&&(this.renderedLinks.hasOwnProperty(e.data.filename)||(this.emptyListHeader.classList.contains("hidden")||this.emptyListHeader.classList.add("hidden"),this.audioList.classList.contains("hidden")&&this.audioList.classList.remove("hidden"),this.renderMusicTrack(e.data),this.renderedLinks[e.data.filename]="")),s(),!0)))}handleCreateAudioPopup(e){this.audioPopup?this.audioPopup.classList.contains("hidden")&&this.audioPopup.classList.remove("hidden"):(this.createAudioPopup(e),this.initElementsListeners())}createAudioPopup(e){document.body.insertAdjacentHTML("afterbegin",'\n            <div class="container-mtz">\n                <div class="popup-header">\n                    <h2 class="header-title">Download music</h2>\n                    <div class="top-buttons">\n                      <span class="drag-popup"></span>\n                      <span class="close-popup"></span>\n                    </div>\n                </div>\n                <h1 class="empty-container-header hidden">Songs are not found! Play song for downloading!</h1>\n                <ul class="songs-list hidden" id="content">\n\n                </ul>\n            </div>\n        '),this.audioPopup=document.querySelector(".container-mtz"),this.buttonsContainer=document.querySelector(".top-buttons"),this.audioList=document.querySelector(".songs-list"),this.emptyListHeader=document.querySelector(".empty-container-header"),this.popupWidth=this.audioPopup.offsetWidth,this.popupHeight=this.audioPopup.popupHeight}renderMusicTrack(e){const t=`\n      <li data-url=${e.url} class="trackItem">\n        <span class="trackName">${e.filename}</span>\n        <span class="trackSize">${e.formattedSize}</span>\n      </li>\n    `;this.audioList.insertAdjacentHTML("beforeend",t)}isObjectEmpty(e){return 0===Object.keys(e).length&&e.constructor===Object}initElementsListeners(){const e=document.querySelector(".close-popup");this.dragPopupBtn=document.querySelector(".drag-popup"),e.addEventListener("click",this.closePopup.bind(this)),this.audioList.addEventListener("click",this.handleAudioListClick.bind(this)),this.dragPopupBtn.addEventListener("mousedown",this.handleDragBtnMousedown.bind(this)),this.dragPopupBtn.addEventListener("mouseup",this.handleDragBtnMouseup.bind(this))}handleDragBtnMousedown(e){document.addEventListener("mousemove",this.handleDocumentMousemove)}handleDragBtnMouseup(e){document.removeEventListener("mousemove",this.handleDocumentMousemove)}handleDocumentMousemove(e){this.audioPopup.ondragstart=function(){return!1};const t=e.clientX-this.buttonsContainer.offsetLeft-this.dragPopupBtn.offsetWidth/2,s=e.clientY-this.buttonsContainer.offsetTop-this.dragPopupBtn.offsetHeight/2;this.audioPopup.style.left=t+"px",this.audioPopup.style.top=s+"px"}closePopup(){this.hideElement(this.audioPopup)}handleAudioListClick(e){const t=e.target.closest(".trackItem");t&&chrome.runtime.sendMessage({type:"downloadTrack",url:t.dataset.url})}showElement(e){e.classList.remove("hidden")}hideElement(e){e.classList.add("hidden")}}document.addEventListener("DOMContentLoaded",(function(e){new AudioPopup}));